c
exit
Geocoder.search full_address
Geocoder.configure(lookup: :nominatim)
Geocoder.config
exit
c
Geocoder.search("#{lat}, #{lng}")
c
Geocoder.search(full_address)
full_address
Geocoder.search("#{lat}, #{lng}").first.address
Geocoder.search("#{lat}, #{lng}").first
Geocoder.search "#{lat}, #{lng}" .first
Geocoder.search "#{lat}, #{lng}"
Geocoder.search "#{lat}, #{long}"
Geocoder.search full_address
address.reverse_geocoded?
c
exit
Geocoder::Geocoder
Geocoder.search "#{lat}, #{lng}"
lng
lat
Geocoder.search("full_ade")
Geocoder.search full_address
c
exit
detroit.geocoded?
detroit
Geocoder.search [lat, lng]
Geocoder.search lat, lng
Geocoder.search "test"
Geocoder.search
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates)
c
Geocoder.search(full_address)
Geocoder.configure(always_raise: true, use_https: true)
Geocoder.config
Geocoder.search(full_address)
c
Geoc
Geocoder.search("#{lat}, #{lng}")
Geocoder.search("#{lat}, #{lng})
full_address
Geocoder.search(full_address)
Geocoder.configure(always_raise: true)
Geocoder.search "1600 Pennsylvania Avenue NW Washington, D.C. 20500"
City.near
JSON.parse(Geocoder.search(full_address))
JSON.parse
Json.parse
Geocoder.search full_address
Geocoder.config
c
Geococ
Geocoder.config
exit
Geocoder.search(full_address)
Geocoder.search(full_address).inspect
Geocoder.search(full_address).inspecgt
Geocoder.search(full_address)
Geocoder.config
Geocoder.search(full_address)
c
Geocoder.search("#{lat},#{lng}")
Geocoder.search([lat, lng])
lng
lat
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500")
Geocoder
address.geocoded?
c
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500")
Geocoder.configure(lookup: :geocoder_ca, timeout: 10, http_headers: { 'Accept-Encoding' => 'json' })
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500")
Geocoder.search([lat, lng])
Geocoder.search([lat, lng])\
Geocoder.search([lat, lng]))
Geocoder.search(address)
c
address.reverse_geocoded?
q
c
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500").first.coordinates
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500").coordinates
Geocoder.search("1600 Pennsylvania Avenue NW Washington, D.C. 20500")
c
Geocoder.search([9, 91])
c
Geocoder.search([@lat, @lng]).first.address
Geocoder.search([@lat, @lng]).first.data["usa"]
Geocoder.search([@lat, @lng]).first.data.usa
Geocoder.search([@lat, @lng]).first.data
Geocoder.search([@lat, @lng]).first
Geocoder.search([@lat, @lng]).data
Geocoder.search([@lat, @lng])["data"]
Geocoder.search([@lat, @lng])[:data]
Geocoder.search([@lat, @lng])
Geocoder.search(@lat, @lng)
c
Geocoder.search(@full_address)
c
full_address
c
full_address
c
s
address.geocoded?
c
address.reverse_geocoded?
address.lng
address.lat
address
c
Î©c
lng
lat
address.lng
address.lat
address
c
full_address
address
c
self.lng
self.lat
lat
coordinates
Geocoder.search(coordinates)
Geocoder.search(self.coordinates)
c
Geocoder.geocode
address.geocode_by
address.geocode_buy
address.geocode?
address.geocode
address.full_address
address.geocoded?
c
exigt
Geocoder.search(full_address).empty?
Geocoder.search(full_address).class
Geocoder.search full_address.empty?
Geocoder.search full_address
address.geocoded?
exit
Geocoder.search("1").empty?
Geocoder.search [1, 2].empty?
Geocoder.search [1, 2]
Geocoder.search "2"
Geocoder.search "1"
Geocoder.search("1")
c
exit
Geocoder::Calculations.distance_between([47.858205,2.294359], [40.748433,-73.985655])
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates).inspect
Geocoder::Calculations.distance_between([47.858205,2.294359], [40.748433,-73.985655])
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates).inspect
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates)
Geocoder.search(detroit.coordinates)
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates)
detroit.coordinates
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates)
c
Geocoderc
kansas_city.coordinates
detroit.coordinates
Geocoder::Calculations.distance_between(detroit.coordinates, kansas_city.coordinates)
c
Address.search("erojejrer")
Address.search("hey")
c
full_address
Geocoder.search(full_address)
c
Geocoder.search(full_address)\
Geocoder.search(full_address)
[double(data:payload)]
result
payload
Geocoder.search(full_address)
c
n
c
Geocoder.search full_address
c
Geocoder.search full_address
result
expect(Geocoder).to receive(:search).with(full_address).and_return result
Geocoder.search(full_address)
c
Geocoder.search(full_address)
exit
Geocoder.search(full_address)
Geocoder.configure(http_headers: { 'Accept-Encoding' => 'json' })
Geocoder.search(full_address)
Geocoder.search(full_ad
Geocoder.configure(http_headers: { 'Accept-Encoding' => 'json' })
Geocoder.search(full_address)
Geocoder.configure(ip_lookup: :telize)
Geocoder.configure
Geocoder
c
exit
Geocoder.search(full_address)
Geocoder.configure(lookup: :telize)
Geocoder.search(full_address)
Geocoder.configure(jsonp: 1, callback: true)
Geocoder.search(full_address)
c
Geocoder.search(full_address)
exit
Geocoder.search(full_address)
Geocoder.search
Geocoder
